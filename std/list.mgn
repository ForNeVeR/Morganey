load logic

nil := \a.b. b
isnil := \l.l (\h.t.d. (\a.b.b)) (\a.b.a)

/* Reverses the list `xs`
 */
reverse := \xs. Y (\reverseRec.xs.acc. (isnil xs) acc (reverseRec (tail xs) (cons (head xs) acc))) xs []

/* Range from `start` to `next`, with a step-size of `1`
 * example: range 1 5 = [1,2,3,4,5]
 * require: start <= end
 */
range := \start.end. rangeWithNext start (succ start) end

/* Range from `start` to `next`, with a step-size of `(next - start)`
 * example: rangeWithNext 1 3 10 = [1,3,5,7,9]
 * require: start <= end
 */
rangeWithNext := \start.next.end. rangeWithStep start (minus next start) end

/* Range from `start` to `next`
 * example: rangeWithStep 5 3 15 = [5,8,11,14]
 * require: start <= end
 */
rangeWithStep := \start.step.end. reverse (Y (\inner.i.acc. (gt i end) acc (inner (plus i step) (cons i acc) )) start [])

pair := \x.y.z. z x y
first := \n.n (\a.b.a)
second := \n.n (\a.b.b)

cons := pair
head := first
tail := second
